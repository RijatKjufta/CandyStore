// <auto-generated />
using System;
using Candystore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Candystore.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210720214202_dataseed")]
    partial class dataseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Candystore.Entities.ApetisaniTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApetisaniProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Apetisani");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ApetisaniProduct = "Almonds",
                            Description = "Seeds for Joy",
                            imgURL = "almond-seeds.jpg",
                            price = 4.9900000000000002
                        },
                        new
                        {
                            ID = 2,
                            ApetisaniProduct = "Brazilian Nuts",
                            Description = "Seeds for Joy",
                            imgURL = "brazilian-nuts.jpg",
                            price = 10.99
                        },
                        new
                        {
                            ID = 3,
                            ApetisaniProduct = "Chips Peanuts",
                            Description = "Seeds for Joy",
                            imgURL = "chips-peanuts.jpg",
                            price = 4.9900000000000002
                        },
                        new
                        {
                            ID = 4,
                            ApetisaniProduct = "Hazelnuts",
                            Description = "Seeds for Joy",
                            imgURL = "hazelnuts.jpg",
                            price = 9.9900000000000002
                        },
                        new
                        {
                            ID = 5,
                            ApetisaniProduct = "Indian Nuts",
                            Description = "Seeds for Joy",
                            imgURL = "indian-nuts.jpg",
                            price = 10.99
                        },
                        new
                        {
                            ID = 6,
                            ApetisaniProduct = "Leblebi Sari",
                            Description = "Seeds for Joy",
                            imgURL = "leblebi-sari.jpg",
                            price = 4.9900000000000002
                        },
                        new
                        {
                            ID = 7,
                            ApetisaniProduct = "Peanuts",
                            Description = "Seeds for Joy",
                            imgURL = "peanuts.jpg",
                            price = 4.9900000000000002
                        },
                        new
                        {
                            ID = 8,
                            ApetisaniProduct = "Peanuts Covered",
                            Description = "Seeds for Joy",
                            imgURL = "peanuts-covered.jpg",
                            price = 4.9900000000000002
                        },
                        new
                        {
                            ID = 9,
                            ApetisaniProduct = "Pistachios",
                            Description = "Seeds for Joy",
                            imgURL = "pistaccio.jpg",
                            price = 9.9900000000000002
                        },
                        new
                        {
                            ID = 10,
                            ApetisaniProduct = "Popcorn",
                            Description = "Seeds for Joy",
                            imgURL = "popcorn4_4bee.jpg",
                            price = 2.9900000000000002
                        },
                        new
                        {
                            ID = 11,
                            ApetisaniProduct = "Pumpkin Seeds",
                            Description = "Seeds for Joy",
                            imgURL = "pumpkin-seeds.jpg",
                            price = 3.9900000000000002
                        },
                        new
                        {
                            ID = 12,
                            ApetisaniProduct = "Red Pistachios",
                            Description = "Seeds for Joy",
                            imgURL = "red-pistacios.jpg ",
                            price = 12.99
                        },
                        new
                        {
                            ID = 13,
                            ApetisaniProduct = "Sunflower Seeds",
                            Description = "Seeds for Joy",
                            imgURL = "sunflower-seeds.jpg ",
                            price = 3.9900000000000002
                        },
                        new
                        {
                            ID = 14,
                            ApetisaniProduct = "Sweet Corn",
                            Description = "Seeds for Joy",
                            imgURL = "sweet-corn.jpg",
                            price = 4.9900000000000002
                        },
                        new
                        {
                            ID = 15,
                            ApetisaniProduct = "Sweet Peanuts",
                            Description = "Seeds for Joy",
                            imgURL = "sweet-peanuts.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 16,
                            ApetisaniProduct = "Wallnuts",
                            Description = "Seeds for Joy",
                            imgURL = "wallnuts.jpg",
                            price = 8.9900000000000002
                        });
                });

            modelBuilder.Entity("Candystore.Entities.CandyTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CandyProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("CandyTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CandyProduct = "Bubble Bubble",
                            Description = "Sweat",
                            imgURL = "bubble-bubble.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 2,
                            CandyProduct = "Forrest Fruit Candies",
                            Description = "Sweat",
                            imgURL = "christmas-candycanes.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 3,
                            CandyProduct = "Fruit Sallad",
                            Description = "Sweat and Sour",
                            imgURL = "forrest-fruit-candy.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 4,
                            CandyProduct = "Forrest Fruit Candies",
                            Description = "Sweat",
                            imgURL = "fruit-salad-rock-candy.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 5,
                            CandyProduct = "Love Image Candies",
                            Description = "Sweat",
                            imgURL = "love-image-candy.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 6,
                            CandyProduct = "Mix Image Candies",
                            Description = "Sweat",
                            imgURL = "mix-hard-image-candy.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 7,
                            CandyProduct = "Ribbon Candies",
                            Description = "Sweat",
                            imgURL = "ribbon-candy.jpg",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 8,
                            CandyProduct = "Rock Candie",
                            Description = "Sweat",
                            imgURL = "rock-candy.png",
                            price = 5.9900000000000002
                        },
                        new
                        {
                            ID = 9,
                            CandyProduct = "Christmas Candy",
                            Description = "Menthol and Sweet",
                            imgURL = "christmas-candycanes.jpg",
                            price = 5.9900000000000002
                        });
                });

            modelBuilder.Entity("Candystore.Entities.CoffeTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoffeProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("imgURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CoffeTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CoffeProduct = "Hausbraund",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "hausbrandt-academia.jpg"
                        },
                        new
                        {
                            ID = 2,
                            CoffeProduct = "Amigos Blue",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "amigos-blue.jpeg"
                        },
                        new
                        {
                            ID = 3,
                            CoffeProduct = "Amigos Light",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "amigos-light.jpeg"
                        },
                        new
                        {
                            ID = 4,
                            CoffeProduct = "Auslesse",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "auslesse-caffe.png"
                        },
                        new
                        {
                            ID = 5,
                            CoffeProduct = "Boncampo",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "boncampo-clasic.jpg"
                        },
                        new
                        {
                            ID = 6,
                            CoffeProduct = "Chicco D'Oro",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "chicco-doro.png"
                        },
                        new
                        {
                            ID = 7,
                            CoffeProduct = "Doncaffe",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "doncaffe.jpg"
                        },
                        new
                        {
                            ID = 8,
                            CoffeProduct = "Frank",
                            Description = "100% Arabica",
                            Price = 19.989999999999998,
                            imgURL = "frank].png"
                        },
                        new
                        {
                            ID = 9,
                            CoffeProduct = "Housbrandt Academia",
                            Description = "100% Arabica",
                            Price = 20.989999999999998,
                            imgURL = "hausbrandt-academia.jpg"
                        },
                        new
                        {
                            ID = 10,
                            CoffeProduct = "Hausbraundt Black",
                            Description = "100% Arabica",
                            Price = 22.989999999999998,
                            imgURL = "hausbrandt-black.jpg"
                        },
                        new
                        {
                            ID = 11,
                            CoffeProduct = "Hausbraundt Espresso",
                            Description = "100% Arabica",
                            Price = 15.99,
                            imgURL = "hausbrandt-espresso.png"
                        },
                        new
                        {
                            ID = 12,
                            CoffeProduct = "Illy Mocca",
                            Description = "100% Arabica",
                            Price = 25.989999999999998,
                            imgURL = "illy mocca.jpg"
                        },
                        new
                        {
                            ID = 13,
                            CoffeProduct = "Amigos",
                            Description = "80% Arabica 20% Robusta",
                            Price = 11.99,
                            imgURL = "amigos-red.jpeg"
                        });
                });

            modelBuilder.Entity("Candystore.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apetisani")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApetisaniProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Candy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandyProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coffe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoffeProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Candystore.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApetisaniId")
                        .HasColumnType("int");

                    b.Property<int>("CandyId")
                        .HasColumnType("int");

                    b.Property<int>("CoffeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("PriceApetisani")
                        .HasColumnType("float");

                    b.Property<double>("PriceCandy")
                        .HasColumnType("float");

                    b.Property<double>("PriceCoffe")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Candystore.Entities.Wishlist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApetisaniId")
                        .HasColumnType("int");

                    b.Property<int>("CandyId")
                        .HasColumnType("int");

                    b.Property<int>("CoffeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            ConcurrencyStamp = "54becfae-9ed0-4cec-b62c-2272b222f579",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e74",
                            ConcurrencyStamp = "3c6ed0b3-d851-4839-aa9b-0dfa155c8eb2",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e75",
                            ConcurrencyStamp = "949060b9-6c20-43fa-8876-d8476f16bc4b",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc58",
                            Email = "Test@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEst.COM",
                            NormalizedUserName = "Test@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHQzRrI1rRIGYPsZDozf+52w4Ypmk9d4l89pObbAlgGnEwOPwLTx0oQiv3aigRT7zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Test@test.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            RoleId = "b4280b6a-0613-4cbd-a9e6-f1701e926e73"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
